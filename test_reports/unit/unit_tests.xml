<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="13" time="0.632" timestamp="2025-05-08T11:59:52.204060" hostname="laptop-2"><testcase classname="tests.unit.test_api_documentation" name="test_openapi_spec_valid" time="0.036" /><testcase classname="tests.unit.test_api_documentation" name="test_api_health_check" time="0.034" /><testcase classname="tests.unit.test_api_documentation" name="test_api_versioning" time="0.106" /><testcase classname="tests.unit.test_api_documentation" name="test_api_documentation_complete" time="0.004" /><testcase classname="tests.unit.test_api_documentation" name="test_api_security" time="0.038"><failure message="AssertionError: Security schemes not specified&#10;assert 'securitySchemes' in {'schemas': {'Comment': {'properties': {'content': {'type': 'string'}, 'created_at': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}}, 'type': 'object'}, 'Error': {'properties': {'detail': {'description': 'Error message', 'type': 'string'}}, 'type': 'object'}, 'ErrorResponse': {'properties': {'error': {'type': 'string'}, 'message': {'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}}, 'type': 'object'}, 'HealthResponse': {'properties': {'status': {'enum': ['healthy'], 'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}, 'version': {'type': 'string'}}, 'type': 'object'}, ...}}&#10; +  where {'schemas': {'Comment': {'properties': {'content': {'type': 'string'}, 'created_at': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}}, 'type': 'object'}, 'Error': {'properties': {'detail': {'description': 'Error message', 'type': 'string'}}, 'type': 'object'}, 'ErrorResponse': {'properties': {'error': {'type': 'string'}, 'message': {'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}}, 'type': 'object'}, 'HealthResponse': {'properties': {'status': {'enum': ['healthy'], 'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}, 'version': {'type': 'string'}}, 'type': 'object'}, ...}} = &lt;built-in method get of dict object at 0x000002329E5C7EC0&gt;('components', {})&#10; +    where &lt;built-in method get of dict object at 0x000002329E5C7EC0&gt; = {'components': {'schemas': {'Comment': {'properties': {'content': {'type': 'string'}, 'created_at': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}}, 'type': 'object'}, 'Error': {'properties': {'detail': {'description': 'Error message', 'type': 'string'}}, 'type': 'object'}, 'ErrorResponse': {'properties': {'error': {'type': 'string'}, 'message': {'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}}, 'type': 'object'}, 'HealthResponse': {'properties': {'status': {'enum': [...], 'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}, 'version': {'type': 'string'}}, 'type': 'object'}, ...}}, 'info': {'description': 'API for Legal Study application', 'title': 'Legal Study API', 'version': '1.0.0'}, 'openapi': '3.0.0', 'paths': {'/api/v1/comment': {'post': {'description': 'Add a comment to a document', 'requestBody': {'content': {'application/json': {...}}, 'required': True}, 'responses': {'200': {'description': 'Comment added'}, '400': {'description': 'Invalid input'}, '401': {'description': 'Unauthorized'}}, 'security': [{'BearerAuth': []}], ...}}, '/api/v1/error': {'get': {'description': 'Endpoint to test error handling', 'responses': {'500': {'content': {...}, 'description': 'Internal server error'}}, 'summary': 'Test error endpoint'}}, '/api/v1/protected': {'get': {'description': 'Endpoint that requires authentication', 'responses': {'200': {'description': 'Access granted'}, '401': {'description': 'Unauthorized'}, '403': {'description': 'Forbidden'}}, 'security': [{'BearerAuth': []}], 'summary': 'Protected endpoint'}}, '/api/v1/search': {'post': {'description': 'Search for legal documents', 'requestBody': {'content': {'application/json': {...}}, 'required': True}, 'responses': {'200': {'description': 'Search results'}, '400': {'description': 'Invalid input'}, '401': {'description': 'Unauthorized'}}, 'summary': 'Search endpoint'}}, ...}, ...}.get">def test_api_security():
        """Test that API security is properly documented."""
        api_dir = Path(__file__).parent.parent.parent / '.api'
        with open(api_dir / 'openapi.yaml', 'r') as f:
            spec = yaml.safe_load(f)
&gt;           assert 'securitySchemes' in spec.get('components', {}), "Security schemes not specified"
E           AssertionError: Security schemes not specified
E           assert 'securitySchemes' in {'schemas': {'Comment': {'properties': {'content': {'type': 'string'}, 'created_at': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}}, 'type': 'object'}, 'Error': {'properties': {'detail': {'description': 'Error message', 'type': 'string'}}, 'type': 'object'}, 'ErrorResponse': {'properties': {'error': {'type': 'string'}, 'message': {'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}}, 'type': 'object'}, 'HealthResponse': {'properties': {'status': {'enum': ['healthy'], 'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}, 'version': {'type': 'string'}}, 'type': 'object'}, ...}}
E            +  where {'schemas': {'Comment': {'properties': {'content': {'type': 'string'}, 'created_at': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}}, 'type': 'object'}, 'Error': {'properties': {'detail': {'description': 'Error message', 'type': 'string'}}, 'type': 'object'}, 'ErrorResponse': {'properties': {'error': {'type': 'string'}, 'message': {'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}}, 'type': 'object'}, 'HealthResponse': {'properties': {'status': {'enum': ['healthy'], 'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}, 'version': {'type': 'string'}}, 'type': 'object'}, ...}} = &lt;built-in method get of dict object at 0x000002329E5C7EC0&gt;('components', {})
E            +    where &lt;built-in method get of dict object at 0x000002329E5C7EC0&gt; = {'components': {'schemas': {'Comment': {'properties': {'content': {'type': 'string'}, 'created_at': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}}, 'type': 'object'}, 'Error': {'properties': {'detail': {'description': 'Error message', 'type': 'string'}}, 'type': 'object'}, 'ErrorResponse': {'properties': {'error': {'type': 'string'}, 'message': {'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}}, 'type': 'object'}, 'HealthResponse': {'properties': {'status': {'enum': [...], 'type': 'string'}, 'timestamp': {'format': 'date-time', 'type': 'string'}, 'version': {'type': 'string'}}, 'type': 'object'}, ...}}, 'info': {'description': 'API for Legal Study application', 'title': 'Legal Study API', 'version': '1.0.0'}, 'openapi': '3.0.0', 'paths': {'/api/v1/comment': {'post': {'description': 'Add a comment to a document', 'requestBody': {'content': {'application/json': {...}}, 'required': True}, 'responses': {'200': {'description': 'Comment added'}, '400': {'description': 'Invalid input'}, '401': {'description': 'Unauthorized'}}, 'security': [{'BearerAuth': []}], ...}}, '/api/v1/error': {'get': {'description': 'Endpoint to test error handling', 'responses': {'500': {'content': {...}, 'description': 'Internal server error'}}, 'summary': 'Test error endpoint'}}, '/api/v1/protected': {'get': {'description': 'Endpoint that requires authentication', 'responses': {'200': {'description': 'Access granted'}, '401': {'description': 'Unauthorized'}, '403': {'description': 'Forbidden'}}, 'security': [{'BearerAuth': []}], 'summary': 'Protected endpoint'}}, '/api/v1/search': {'post': {'description': 'Search for legal documents', 'requestBody': {'content': {'application/json': {...}}, 'required': True}, 'responses': {'200': {'description': 'Search results'}, '400': {'description': 'Invalid input'}, '401': {'description': 'Unauthorized'}}, 'summary': 'Search endpoint'}}, ...}, ...}.get

tests\unit\test_api_documentation.py:46: AssertionError</failure></testcase><testcase classname="tests.unit.test_api_documentation" name="test_openapi_spec_exists" time="0.005" /><testcase classname="tests.unit.test_api_documentation" name="test_api_error_handling" time="0.035" /><testcase classname="tests.unit.test_setup" name="test_pytest_working" time="0.005" /><testcase classname="tests.unit.test_setup" name="test_integration_marker" time="0.003" /><testcase classname="tests.unit.test_setup" name="test_security_marker" time="0.003" /><testcase classname="tests.unit.test_setup" name="test_unit_marker" time="0.006" /><testcase classname="tests.unit.test_setup" name="test_python_version" time="0.005" /><testcase classname="tests.unit.test_setup" name="test_env_configuration" time="0.008" /></testsuite></testsuites>