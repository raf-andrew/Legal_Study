"""
Script to set up Git hooks for sniffing infrastructure.
"""
import logging
import os
import shutil
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml

logger = logging.getLogger("setup_hooks")

def main() -> int:
    """Main entry point for hook setup."""
    try:
        # Set up logging
        setup_logging()

        # Load configuration
        config = load_config()
        if not config:
            logger.error("Failed to load configuration")
            return 1

        # Set up hooks
        if not setup_hooks(config):
            logger.error("Failed to set up hooks")
            return 1

        logger.info("Git hooks set up successfully")
        return 0

    except Exception as e:
        logger.error(f"Error setting up hooks: {e}")
        return 1

def setup_logging() -> None:
    """Set up logging configuration."""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )

def load_config() -> Optional[Dict[str, Any]]:
    """Load sniffing configuration."""
    try:
        config_path = Path("sniffing/config/sniffing_config.yaml")
        if not config_path.exists():
            logger.error(f"Configuration file not found: {config_path}")
            return None

        with open(config_path, "r") as f:
            config = yaml.safe_load(f)

        return config

    except Exception as e:
        logger.error(f"Error loading configuration: {e}")
        return None

def setup_hooks(config: Dict[str, Any]) -> bool:
    """Set up Git hooks."""
    try:
        # Get hooks configuration
        hooks_config = config.get("git", {}).get("hooks", {})
        if not hooks_config:
            logger.error("No hooks configuration found")
            return False

        # Get hooks directory
        hooks_dir = Path(".git/hooks")
        if not hooks_dir.exists():
            logger.error("Git hooks directory not found")
            return False

        # Set up pre-commit hook
        if hooks_config.get("pre_commit", {}).get("enabled", False):
            if not setup_pre_commit_hook(hooks_dir, hooks_config["pre_commit"]):
                return False

        # Set up pre-push hook
        if hooks_config.get("pre_push", {}).get("enabled", False):
            if not setup_pre_push_hook(hooks_dir, hooks_config["pre_push"]):
                return False

        return True

    except Exception as e:
        logger.error(f"Error setting up hooks: {e}")
        return False

def setup_pre_commit_hook(hooks_dir: Path, config: Dict[str, Any]) -> bool:
    """Set up pre-commit hook."""
    try:
        hook_path = hooks_dir / "pre-commit"

        # Create hook content
        hook_content = f"""#!/bin/sh
# Pre-commit hook for sniffing infrastructure
# Generated by setup_hooks.py

# Exit on error
set -e

echo "🔍 Running pre-commit checks..."

# Run sniffing on staged files
python -m sniffing.git.hooks.pre_commit

# Check exit status
if [ $? -ne 0 ]; then
    echo "❌ Pre-commit checks failed. Please fix the issues before committing."
    exit 1
fi

echo "✅ Pre-commit checks passed."
"""

        # Write hook file
        hook_path.write_text(hook_content)
        hook_path.chmod(0o755)

        logger.info("Pre-commit hook set up successfully")
        return True

    except Exception as e:
        logger.error(f"Error setting up pre-commit hook: {e}")
        return False

def setup_pre_push_hook(hooks_dir: Path, config: Dict[str, Any]) -> bool:
    """Set up pre-push hook."""
    try:
        hook_path = hooks_dir / "pre-push"

        # Create hook content
        hook_content = f"""#!/bin/sh
# Pre-push hook for sniffing infrastructure
# Generated by setup_hooks.py

# Exit on error
set -e

echo "🔍 Running pre-push checks..."

# Run full test suite
python -m sniffing.git.hooks.pre_push

# Check exit status
if [ $? -ne 0 ]; then
    echo "❌ Pre-push checks failed. Please fix the issues before pushing."
    exit 1
fi

echo "✅ Pre-push checks passed."
"""

        # Write hook file
        hook_path.write_text(hook_content)
        hook_path.chmod(0o755)

        logger.info("Pre-push hook set up successfully")
        return True

    except Exception as e:
        logger.error(f"Error setting up pre-push hook: {e}")
        return False

def backup_existing_hooks(hooks_dir: Path) -> bool:
    """Back up existing hooks."""
    try:
        # Create backup directory
        backup_dir = hooks_dir / "backup"
        backup_dir.mkdir(exist_ok=True)

        # Back up existing hooks
        for hook in ["pre-commit", "pre-push"]:
            hook_path = hooks_dir / hook
            if hook_path.exists():
                backup_path = backup_dir / f"{hook}.bak"
                shutil.copy2(hook_path, backup_path)
                logger.info(f"Backed up existing {hook} hook")

        return True

    except Exception as e:
        logger.error(f"Error backing up hooks: {e}")
        return False

def verify_hooks(hooks_dir: Path) -> bool:
    """Verify hook installation."""
    try:
        # Check hook files
        for hook in ["pre-commit", "pre-push"]:
            hook_path = hooks_dir / hook
            if not hook_path.exists():
                logger.error(f"{hook} hook not found")
                return False
            if not os.access(hook_path, os.X_OK):
                logger.error(f"{hook} hook not executable")
                return False

        # Try running hooks
        import subprocess
        for hook in ["pre-commit", "pre-push"]:
            hook_path = hooks_dir / hook
            try:
                subprocess.run([str(hook_path), "--version"], check=True, capture_output=True)
            except subprocess.CalledProcessError as e:
                logger.error(f"Error verifying {hook} hook: {e}")
                return False

        return True

    except Exception as e:
        logger.error(f"Error verifying hooks: {e}")
        return False

def cleanup_old_hooks(hooks_dir: Path) -> bool:
    """Clean up old hook files."""
    try:
        # Remove old hook files
        for hook in ["pre-commit", "pre-push"]:
            hook_path = hooks_dir / hook
            if hook_path.exists():
                hook_path.unlink()
                logger.info(f"Removed old {hook} hook")

        return True

    except Exception as e:
        logger.error(f"Error cleaning up old hooks: {e}")
        return False

if __name__ == "__main__":
    sys.exit(main())
