#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
import sys
from pathlib import Path
import requests
import webbrowser
from datetime import datetime

class CodespaceManager:
    def __init__(self):
        self.config_dir = Path.home() / '.config' / 'codespace'
        self.config_file = self.config_dir / 'config.json'
        self.ensure_config()

    def ensure_config(self):
        """Ensure configuration directory and file exist."""
        self.config_dir.mkdir(parents=True, exist_ok=True)
        if not self.config_file.exists():
            self.config_file.write_text(json.dumps({
                'codespaces': {},
                'last_updated': datetime.now().isoformat()
            }))

    def load_config(self):
        """Load configuration from file."""
        return json.loads(self.config_file.read_text())

    def save_config(self, config):
        """Save configuration to file."""
        config['last_updated'] = datetime.now().isoformat()
        self.config_file.write_text(json.dumps(config, indent=2))

    def authenticate(self):
        """Authenticate with GitHub."""
        print("Authenticating with GitHub...")
        try:
            subprocess.run(['gh', 'auth', 'login'], check=True)
            print("Authentication successful!")
        except subprocess.CalledProcessError:
            print("Authentication failed. Please try again.")
            sys.exit(1)

    def create_codespace(self, name, branch=None):
        """Create a new codespace."""
        self.authenticate()

        cmd = ['gh', 'codespace', 'create']
        if branch:
            cmd.extend(['--branch', branch])

        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            codespace_id = result.stdout.strip()

            config = self.load_config()
            config['codespaces'][name] = {
                'id': codespace_id,
                'created_at': datetime.now().isoformat(),
                'status': 'created'
            }
            self.save_config(config)

            print(f"Codespace created successfully: {codespace_id}")
            return codespace_id
        except subprocess.CalledProcessError as e:
            print(f"Failed to create codespace: {e.stderr}")
            sys.exit(1)

    def list_codespaces(self):
        """List all codespaces."""
        self.authenticate()

        try:
            result = subprocess.run(['gh', 'codespace', 'list', '--json', 'name,state,gitStatus'],
                                 capture_output=True, text=True, check=True)
            codespaces = json.loads(result.stdout)

            print("\nAvailable Codespaces:")
            for cs in codespaces:
                print(f"\nName: {cs['name']}")
                print(f"State: {cs['state']}")
                print(f"Git Status: {cs['gitStatus']}")
        except subprocess.CalledProcessError as e:
            print(f"Failed to list codespaces: {e.stderr}")
            sys.exit(1)

    def delete_codespace(self, name):
        """Delete a codespace."""
        self.authenticate()

        config = self.load_config()
        if name not in config['codespaces']:
            print(f"Codespace {name} not found in configuration.")
            return

        codespace_id = config['codespaces'][name]['id']

        try:
            subprocess.run(['gh', 'codespace', 'delete', codespace_id], check=True)
            del config['codespaces'][name]
            self.save_config(config)
            print(f"Codespace {name} deleted successfully.")
        except subprocess.CalledProcessError as e:
            print(f"Failed to delete codespace: {e.stderr}")
            sys.exit(1)

    def open_codespace(self, name):
        """Open a codespace in the browser."""
        self.authenticate()

        config = self.load_config()
        if name not in config['codespaces']:
            print(f"Codespace {name} not found in configuration.")
            return

        codespace_id = config['codespaces'][name]['id']

        try:
            result = subprocess.run(['gh', 'codespace', 'code', codespace_id],
                                 capture_output=True, text=True, check=True)
            print(f"Opening codespace {name}...")
        except subprocess.CalledProcessError as e:
            print(f"Failed to open codespace: {e.stderr}")
            sys.exit(1)

    def run_command(self, name, command):
        """Run a command in a codespace."""
        self.authenticate()

        config = self.load_config()
        if name not in config['codespaces']:
            print(f"Codespace {name} not found in configuration.")
            return

        codespace_id = config['codespaces'][name]['id']

        try:
            subprocess.run(['gh', 'codespace', 'ssh', codespace_id, '--command', command], check=True)
        except subprocess.CalledProcessError as e:
            print(f"Failed to run command: {e.stderr}")
            sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='GitHub Codespaces Management Tool')
    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # Create command
    create_parser = subparsers.add_parser('create', help='Create a new codespace')
    create_parser.add_argument('name', help='Name for the codespace')
    create_parser.add_argument('--branch', help='Branch to use for the codespace')

    # List command
    subparsers.add_parser('list', help='List all codespaces')

    # Delete command
    delete_parser = subparsers.add_parser('delete', help='Delete a codespace')
    delete_parser.add_argument('name', help='Name of the codespace to delete')

    # Open command
    open_parser = subparsers.add_parser('open', help='Open a codespace')
    open_parser.add_argument('name', help='Name of the codespace to open')

    # Run command
    run_parser = subparsers.add_parser('run', help='Run a command in a codespace')
    run_parser.add_argument('name', help='Name of the codespace')
    run_parser.add_argument('command', help='Command to run')

    args = parser.parse_args()
    manager = CodespaceManager()

    if args.command == 'create':
        manager.create_codespace(args.name, args.branch)
    elif args.command == 'list':
        manager.list_codespaces()
    elif args.command == 'delete':
        manager.delete_codespace(args.name)
    elif args.command == 'open':
        manager.open_codespace(args.name)
    elif args.command == 'run':
        manager.run_command(args.name, args.command)
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
